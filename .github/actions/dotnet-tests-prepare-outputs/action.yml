# Copyright 2020 Energinet DataHub A/S
#
# Licensed under the Apache License, Version 2.0 (the "License2");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Prepare dotnet tests outputs

#
# This action is called from the 'dotnet-solution-ci-build.yml' file.
#
# Prepared outputs will be zipped and uploaded as the 'dotnet-tests' artifact.
#

inputs:
  OUTPUT_PATH:
    required: true

runs:
  using: composite
  steps:
    # To ensure code coverage tooling is available in bin folder, we use publish on test assemblies
    # See https://github.com/coverlet-coverage/coverlet/issues/521#issuecomment-522429394
    - name: Publish Messaging.IntegrationTests
      shell: bash
      run: |
        dotnet publish \
          '.\source\Messaging.IntegrationTests\Messaging.IntegrationTests.csproj' \
          --no-build \
          --no-restore \
          --configuration Release \
          --output '.\source\Messaging.IntegrationTests\bin\Release\net6.0'

    # To ensure code coverage tooling is available in bin folder, we use publish on test assemblies
    # See https://github.com/coverlet-coverage/coverlet/issues/521#issuecomment-522429394
    - name: Publish Messaging.ArchitectureTests
      shell: bash
      run: |
        dotnet publish \
          '.\source\Messaging.ArchitectureTests\Messaging.ArchitectureTests.csproj' \
          --no-build \
          --no-restore \
          --configuration Release \
          --output '.\source\Messaging.ArchitectureTests\bin\Release\net6.0'

    # To ensure code coverage tooling is available in bin folder, we use publish on test assemblies
    # See https://github.com/coverlet-coverage/coverlet/issues/521#issuecomment-522429394
    - name: Publish Messaging.Tests
      shell: bash
      run: |
        dotnet publish \
          '.\source\Messaging.Tests\Messaging.Tests.csproj' \
          --no-build \
          --no-restore \
          --configuration Release \
          --output '.\source\Messaging.Tests\bin\Release\net6.0'

    # To ensure code coverage tooling is available in bin folder, we use publish on test assemblies
    # See https://github.com/coverlet-coverage/coverlet/issues/521#issuecomment-522429394
    - name: Publish Processing.ArchitectureTests
      shell: bash
      run: |
        dotnet publish \
          '.\source\Processing.ArchitectureTests\Processing.ArchitectureTests.csproj' \
          --no-build \
          --no-restore \
          --configuration Release \
          --output '.\source\Processing.ArchitectureTests\bin\Release\net6.0'

    # To ensure code coverage tooling is available in bin folder, we use publish on test assemblies
    # See https://github.com/coverlet-coverage/coverlet/issues/521#issuecomment-522429394
    - name: Publish Processing.IntegrationTests
      shell: bash
      run: |
        dotnet publish \
          '.\source\Processing.IntegrationTests\Processing.IntegrationTests.csproj' \
          --no-build \
          --no-restore \
          --configuration Release \
          --output '.\source\Processing.IntegrationTests\bin\Release\net6.0'

    # To ensure code coverage tooling is available in bin folder, we use publish on test assemblies
    # See https://github.com/coverlet-coverage/coverlet/issues/521#issuecomment-522429394
    - name: Publish Processing.Tests
      shell: bash
      run: |
        dotnet publish \
          '.\source\Processing.Tests\Processing.Tests.csproj' \
          --no-build \
          --no-restore \
          --configuration Release \
          --output '.\source\Processing.Tests\bin\Release\net6.0'

    - name: Copy all bin folders
      shell: bash
      run: |
        # Create base directory
        mkdir -p '${{ inputs.OUTPUT_PATH }}/source' ';'
        # Copy everything from source to the new directory
        cp -a source/. '${{ inputs.OUTPUT_PATH }}/source'
        # Remove obj-directories from artifact
        find ${{ inputs.OUTPUT_PATH }}/ -type d -name 'obj' -exec rm -rf {} +