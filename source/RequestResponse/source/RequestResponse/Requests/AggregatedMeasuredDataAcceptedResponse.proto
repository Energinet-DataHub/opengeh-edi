/* Copyright 2020 Energinet DataHub A/S
 *
 * Licensed under the Apache License, Version 2.0 (the "License2");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

option csharp_namespace = "Energinet.DataHub.Edi.Responses.AggregatedMeasureData";

message AggregatedTimeSeriesRequestAccepted {
  repeated Serie series = 2;
}

message Serie {
  // A consecutive number which is increased by new calculations with the same reason code. LRN: Should we know the reason code for the series?
  int32 version = 2;
  string grid_area = 4;
  Product product = 7;
  QuantityUnit quantity_unit = 8;
  Period period = 9;
  repeated Point Point = 3;
}

message Point {
  int32 position = 1;
  DecimalValue quantity = 2;
  QuantityQuality quantity_quality = 3;
}

message Period {
  google.protobuf.Timestamp start_of_period = 3;
  google.protobuf.Timestamp end_of_period = 4;
}

enum QuantityQuality{
  QUANTITY_QUALITY_UNSPECIFIED = 0;
  QUANTITY_QUALITY_MISSING = 1;
  QUANTITY_QUALITY_ESTIMATED = 2;
  QUANTITY_QUALITY_MEASURED = 3;
  QUANTITY_QUALITY_INCOMPLETE = 4;
  QUANTITY_QUALITY_CALCULATED = 5;
}

enum QuantityUnit{
  QUANTITY_UNIT_UNSPECIFIED = 0;
  QUANTITY_UNIT_KWH = 1;
}

enum Product{
  PRODUCT_UNSPECIFIED = 0;
  PRODUCT_ENERGY = 1;
  PRODUCT_TARIFF = 2;
}

/*
 * Representation of a decimal value.
 * See more at https://learn.microsoft.com/en-us/dotnet/architecture/grpc-for-wcf-developers/protobuf-data-types#decimals.
 * Example: 12345.6789 -> { units = 12345, nanos = 678900000 }
 */
message DecimalValue {

  // Whole units part of the amount
  int64 units = 1;

  // Nano units of the amount (10^-9)
  // Must be same sign as units
  sfixed32 nanos = 2;
}